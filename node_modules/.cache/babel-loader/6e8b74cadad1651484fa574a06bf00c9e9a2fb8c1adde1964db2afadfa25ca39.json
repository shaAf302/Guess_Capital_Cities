{"ast":null,"code":"var _jsxFileName = \"D:\\\\Javascritp\\\\MCQs\\\\mcqs_app\\\\src\\\\components\\\\MCQs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport questionData from \"./QuestionsData\"; // Make sure you import your questions data\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MCQs() {\n  _s();\n  // Function to shuffle the questions and pick 20 random ones\n  const getRandomQuestions = (questions, count) => {\n    const shuffled = [...questions].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, count);\n  };\n\n  // State to store the shuffled questions\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isQuizCompleted, setIsQuizCompleted] = useState(false);\n  useEffect(() => {\n    const shuffledQuestions = getRandomQuestions(questionData, 20);\n    setQuestions(shuffledQuestions);\n  }, []);\n  const handleAnswerClick = option => {\n    setSelectedAnswer(option);\n\n    // Delay for showing the answer for a moment before moving to the next question\n    setTimeout(() => {\n      if (currentQuestionIndex + 1 < questions.length) {\n        // Move to the next question\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n        setSelectedAnswer(null); // Reset the selected answer for the next question\n      } else {\n        // Quiz is completed\n        setIsQuizCompleted(true);\n      }\n    }, 1000); // Delay before moving to the next question (1 second)\n  };\n\n  // Only show the current question if the questions array is loaded and quiz is not completed\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 text-white bg-gray-900 h-screen flex flex-col items-center\",\n    children: isQuizCompleted ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-4\",\n      children: \"Quiz Completed!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : currentQuestion ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold mb-4\",\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentQuestion.flag,\n        alt: \"Country Flag\",\n        className: \"w-20 h-20 mb-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col space-y-2\",\n        children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerClick(option),\n          className: `p-2 rounded-lg text-lg border-2 border-gray-300 hover:bg-gray-700 ${selectedAnswer === option ? \"bg-green-500\" : \"bg-gray-800\"}`,\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(MCQs, \"NRPFX9Ned4TKmQD2uGcwHDGjCcE=\");\n_c = MCQs;\nvar _c;\n$RefreshReg$(_c, \"MCQs\");","map":{"version":3,"names":["React","useState","useEffect","questionData","jsxDEV","_jsxDEV","Fragment","_Fragment","MCQs","_s","getRandomQuestions","questions","count","shuffled","sort","Math","random","slice","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","isQuizCompleted","setIsQuizCompleted","shuffledQuestions","handleAnswerClick","option","setTimeout","length","currentQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question","src","flag","alt","options","map","index","onClick","_c","$RefreshReg$"],"sources":["D:/Javascritp/MCQs/mcqs_app/src/components/MCQs.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport questionData from \"./QuestionsData\"; // Make sure you import your questions data\r\n\r\nexport default function MCQs() {\r\n  // Function to shuffle the questions and pick 20 random ones\r\n  const getRandomQuestions = (questions, count) => {\r\n    const shuffled = [...questions].sort(() => Math.random() - 0.5);\r\n    return shuffled.slice(0, count);\r\n  };\r\n\r\n  // State to store the shuffled questions\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [isQuizCompleted, setIsQuizCompleted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const shuffledQuestions = getRandomQuestions(questionData, 20);\r\n    setQuestions(shuffledQuestions);\r\n  }, []);\r\n\r\n  const handleAnswerClick = (option) => {\r\n    setSelectedAnswer(option);\r\n\r\n    // Delay for showing the answer for a moment before moving to the next question\r\n    setTimeout(() => {\r\n      if (currentQuestionIndex + 1 < questions.length) {\r\n        // Move to the next question\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        setSelectedAnswer(null); // Reset the selected answer for the next question\r\n      } else {\r\n        // Quiz is completed\r\n        setIsQuizCompleted(true);\r\n      }\r\n    }, 1000); // Delay before moving to the next question (1 second)\r\n  };\r\n\r\n  // Only show the current question if the questions array is loaded and quiz is not completed\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"p-4 text-white bg-gray-900 h-screen flex flex-col items-center\">\r\n      {isQuizCompleted ? (\r\n        <h1 className=\"text-3xl font-bold mb-4\">Quiz Completed!</h1>\r\n      ) : currentQuestion ? (\r\n        <>\r\n          <h1 className=\"text-3xl font-bold mb-4\">\r\n            {currentQuestion.question}\r\n          </h1>\r\n          <img\r\n            src={currentQuestion.flag}\r\n            alt=\"Country Flag\"\r\n            className=\"w-20 h-20 mb-4\"\r\n          />\r\n          <div className=\"flex flex-col space-y-2\">\r\n            {currentQuestion.options.map((option, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => handleAnswerClick(option)}\r\n                className={`p-2 rounded-lg text-lg border-2 border-gray-300 hover:bg-gray-700 ${\r\n                  selectedAnswer === option ? \"bg-green-500\" : \"bg-gray-800\"\r\n                }`}\r\n              >\r\n                {option}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <p>Loading questions...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}