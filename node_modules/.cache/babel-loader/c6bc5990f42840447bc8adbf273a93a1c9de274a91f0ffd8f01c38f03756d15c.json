{"ast":null,"code":"var _jsxFileName = \"D:\\\\Javascritp\\\\MCQs\\\\mcqs_app\\\\src\\\\components\\\\MCQs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport questionData from \"./QuestionsData\"; // Import your questions data\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MCQs() {\n  _s();\n  const shuffleArray = array => {\n    return array.sort(() => Math.random() - 0.5);\n  };\n  const getRandomQuestions = useCallback((questions, count) => {\n    const shuffled = shuffleArray([...questions]);\n    return shuffled.slice(0, count);\n  }, []); // No dependencies needed\n\n  const [questions, setQuestions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [shuffledOptions, setShuffledOptions] = useState([]);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isQuizCompleted, setIsQuizCompleted] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(null); // to track if the answer is correct or not\n\n  useEffect(() => {\n    const shuffledQuestions = getRandomQuestions(questionData, 10);\n    setQuestions(shuffledQuestions);\n  }, [getRandomQuestions]); // This will not warn about missing dependencies\n\n  useEffect(() => {\n    if (questions.length > 0) {\n      setShuffledOptions(shuffleArray([...questions[currentQuestionIndex].options]));\n    }\n  }, [currentQuestionIndex, questions]);\n  const handleAnswerClick = option => {\n    setSelectedAnswer(option);\n    const correctAnswer = questions[currentQuestionIndex].correctAnswer;\n    if (option === correctAnswer) {\n      setIsCorrect(true);\n      setScore(score + 1);\n      // Correct answer\n    } else {\n      setIsCorrect(false); // Wrong answer\n    }\n    setTimeout(() => {\n      if (currentQuestionIndex + 1 < questions.length) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n        setSelectedAnswer(null); // Reset for the next question\n        setIsCorrect(null); // Reset correctness for the next question\n      } else {\n        setIsQuizCompleted(true);\n      }\n    }, 1000); // Delay for feedback\n  };\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 text-white bg-gray-900 h-screen flex flex-col items-center\",\n    children: isQuizCompleted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Quiz Completed!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your score is \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : currentQuestion ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold mb-4\",\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentQuestion.flag,\n        alt: \"Country Flag\",\n        className: \"w-60 h-40 mb-6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row space-x-2\",\n        children: shuffledOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerClick(option),\n          className: `p-2 rounded-lg text-lg border-2 border-gray-300 hover:bg-gray-700 ${selectedAnswer === option ? isCorrect === null ? \"bg-gray-800\" : isCorrect && option === currentQuestion.correctAnswer ? \"bg-green-500\" : \"bg-red-500\" : \"bg-gray-800\"}`,\n          disabled: selectedAnswer !== null,\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), selectedAnswer && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `mt-4 text-lg ${isCorrect ? \"text-green-500\" : \"text-red-500\"}`,\n        children: isCorrect ? \"Shabash Its Correct!\" : \"Insaaan bano its Wrong!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(MCQs, \"yNvYmeAqIVrfpxo/xCJvqKsNihU=\");\n_c = MCQs;\nvar _c;\n$RefreshReg$(_c, \"MCQs\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","questionData","jsxDEV","_jsxDEV","Fragment","_Fragment","MCQs","_s","shuffleArray","array","sort","Math","random","getRandomQuestions","questions","count","shuffled","slice","setQuestions","score","setScore","currentQuestionIndex","setCurrentQuestionIndex","shuffledOptions","setShuffledOptions","selectedAnswer","setSelectedAnswer","isQuizCompleted","setIsQuizCompleted","isCorrect","setIsCorrect","shuffledQuestions","length","options","handleAnswerClick","option","correctAnswer","setTimeout","currentQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question","src","flag","alt","map","index","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Javascritp/MCQs/mcqs_app/src/components/MCQs.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport questionData from \"./QuestionsData\"; // Import your questions data\r\n\r\nexport default function MCQs() {\r\n  const shuffleArray = (array) => {\r\n    return array.sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  const getRandomQuestions = useCallback((questions, count) => {\r\n    const shuffled = shuffleArray([...questions]);\r\n    return shuffled.slice(0, count);\r\n  }, []); // No dependencies needed\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [shuffledOptions, setShuffledOptions] = useState([]);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [isQuizCompleted, setIsQuizCompleted] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(null); // to track if the answer is correct or not\r\n\r\n  useEffect(() => {\r\n    const shuffledQuestions = getRandomQuestions(questionData, 10);\r\n    setQuestions(shuffledQuestions);\r\n  }, [getRandomQuestions]); // This will not warn about missing dependencies\r\n\r\n  useEffect(() => {\r\n    if (questions.length > 0) {\r\n      setShuffledOptions(\r\n        shuffleArray([...questions[currentQuestionIndex].options])\r\n      );\r\n    }\r\n  }, [currentQuestionIndex, questions]);\r\n\r\n  const handleAnswerClick = (option) => {\r\n    setSelectedAnswer(option);\r\n    const correctAnswer = questions[currentQuestionIndex].correctAnswer;\r\n\r\n    if (option === correctAnswer) {\r\n      setIsCorrect(true);\r\n      setScore(score + 1);\r\n      // Correct answer\r\n    } else {\r\n      setIsCorrect(false); // Wrong answer\r\n    }\r\n\r\n    setTimeout(() => {\r\n      if (currentQuestionIndex + 1 < questions.length) {\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        setSelectedAnswer(null); // Reset for the next question\r\n        setIsCorrect(null); // Reset correctness for the next question\r\n      } else {\r\n        setIsQuizCompleted(true);\r\n      }\r\n    }, 1000); // Delay for feedback\r\n  };\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"p-4 text-white bg-gray-900 h-screen flex flex-col items-center\">\r\n      {isQuizCompleted ? (\r\n        <div>\r\n          <h1>Quiz Completed!</h1>\r\n          <p>Your score is {score}</p>\r\n        </div>\r\n      ) : currentQuestion ? (\r\n        <>\r\n          <h1 className=\"text-3xl font-bold mb-4\">\r\n            {currentQuestion.question}\r\n          </h1>\r\n          <img\r\n            src={currentQuestion.flag}\r\n            alt=\"Country Flag\"\r\n            className=\"w-60 h-40 mb-6\"\r\n          />\r\n          <div className=\"flex flex-row space-x-2\">\r\n            {shuffledOptions.map((option, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => handleAnswerClick(option)}\r\n                className={`p-2 rounded-lg text-lg border-2 border-gray-300 hover:bg-gray-700 ${\r\n                  selectedAnswer === option\r\n                    ? isCorrect === null\r\n                      ? \"bg-gray-800\"\r\n                      : isCorrect && option === currentQuestion.correctAnswer\r\n                      ? \"bg-green-500\"\r\n                      : \"bg-red-500\"\r\n                    : \"bg-gray-800\"\r\n                }`}\r\n                disabled={selectedAnswer !== null}\r\n              >\r\n                {option}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          {selectedAnswer && (\r\n            <p\r\n              className={`mt-4 text-lg ${\r\n                isCorrect ? \"text-green-500\" : \"text-red-500\"\r\n              }`}\r\n            >\r\n              {isCorrect ? \"Shabash Its Correct!\" : \"Insaaan bano its Wrong!\"}\r\n            </p>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <p>Loading questions...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}