{"ast":null,"code":"var _jsxFileName = \"D:\\\\Javascritp\\\\MCQs\\\\mcqs_app\\\\src\\\\components\\\\MCQs.js\",\n  _s = $RefreshSig$();\n// MCQPage.js\nimport React, { useState } from \"react\";\nimport questionsData from \"./QuestionsData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MCQPage() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const currentQuestion = questionsData[currentQuestionIndex];\n  const handleAnswerClick = answer => {\n    setSelectedAnswer(answer);\n    if (answer === currentQuestion.correctAnswer) {\n      setScore(score + 1);\n    }\n\n    // Move to the next question after a short delay\n    setTimeout(() => {\n      if (currentQuestionIndex + 1 < questionsData.length) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n        setSelectedAnswer(\"\");\n      } else {\n        alert(`Quiz finished! Your score is ${score}/${questionsData.length}`);\n      }\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 text-white bg-gray-900 h-screen flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-4\",\n      children: currentQuestion.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col space-y-2\",\n      children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAnswerClick(option),\n        className: `p-2 rounded-lg text-lg border-2 border-gray-300 hover:bg-gray-700 ${selectedAnswer === option ? \"bg-green-500\" : \"bg-gray-800\"}`,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(MCQPage, \"UEoEzbMhf+grv0WrCGCjoc2UVis=\");\n_c = MCQPage;\nvar _c;\n$RefreshReg$(_c, \"MCQPage\");","map":{"version":3,"names":["React","useState","questionsData","jsxDEV","_jsxDEV","MCQPage","_s","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswer","setSelectedAnswer","score","setScore","currentQuestion","handleAnswerClick","answer","correctAnswer","setTimeout","length","alert","className","children","question","fileName","_jsxFileName","lineNumber","columnNumber","options","map","option","index","onClick","_c","$RefreshReg$"],"sources":["D:/Javascritp/MCQs/mcqs_app/src/components/MCQs.js"],"sourcesContent":["// MCQPage.js\r\nimport React, { useState } from \"react\";\r\nimport questionsData from \"./QuestionsData\";\r\n\r\nexport default function MCQPage() {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\r\n  const [score, setScore] = useState(0);\r\n\r\n  const currentQuestion = questionsData[currentQuestionIndex];\r\n\r\n  const handleAnswerClick = (answer) => {\r\n    setSelectedAnswer(answer);\r\n    if (answer === currentQuestion.correctAnswer) {\r\n      setScore(score + 1);\r\n    }\r\n\r\n    // Move to the next question after a short delay\r\n    setTimeout(() => {\r\n      if (currentQuestionIndex + 1 < questionsData.length) {\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        setSelectedAnswer(\"\");\r\n      } else {\r\n        alert(`Quiz finished! Your score is ${score}/${questionsData.length}`);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4 text-white bg-gray-900 h-screen flex flex-col items-center\">\r\n      <h1 className=\"text-3xl font-bold mb-4\">{currentQuestion.question}</h1>\r\n      <div className=\"flex flex-col space-y-2\">\r\n        {currentQuestion.options.map((option, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleAnswerClick(option)}\r\n            className={`p-2 rounded-lg text-lg border-2 border-gray-300 hover:bg-gray-700 ${\r\n              selectedAnswer === option ? \"bg-green-500\" : \"bg-gray-800\"\r\n            }`}\r\n          >\r\n            {option}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMY,eAAe,GAAGX,aAAa,CAACK,oBAAoB,CAAC;EAE3D,MAAMO,iBAAiB,GAAIC,MAAM,IAAK;IACpCL,iBAAiB,CAACK,MAAM,CAAC;IACzB,IAAIA,MAAM,KAAKF,eAAe,CAACG,aAAa,EAAE;MAC5CJ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACrB;;IAEA;IACAM,UAAU,CAAC,MAAM;MACf,IAAIV,oBAAoB,GAAG,CAAC,GAAGL,aAAa,CAACgB,MAAM,EAAE;QACnDV,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;QACjDG,iBAAiB,CAAC,EAAE,CAAC;MACvB,CAAC,MAAM;QACLS,KAAK,CAAC,gCAAgCR,KAAK,IAAIT,aAAa,CAACgB,MAAM,EAAE,CAAC;MACxE;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACEd,OAAA;IAAKgB,SAAS,EAAC,gEAAgE;IAAAC,QAAA,gBAC7EjB,OAAA;MAAIgB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAER,eAAe,CAACS;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvEtB,OAAA;MAAKgB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EACrCR,eAAe,CAACc,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACzC1B,OAAA;QAEE2B,OAAO,EAAEA,CAAA,KAAMjB,iBAAiB,CAACe,MAAM,CAAE;QACzCT,SAAS,EAAE,qEACTX,cAAc,KAAKoB,MAAM,GAAG,cAAc,GAAG,aAAa,EACzD;QAAAR,QAAA,EAEFQ;MAAM,GANFC,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOJ,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACpB,EAAA,CA1CuBD,OAAO;AAAA2B,EAAA,GAAP3B,OAAO;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}